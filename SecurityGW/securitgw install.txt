apt-get update && \
apt install ca-certificates apt-utils autoconf automake build-essential git libcurl4-openssl-dev libgeoip-dev liblmdb-dev libpcre++-dev libtool libxml2-dev	libyajl-dev	pkgconf	wget zlib1g-dev nginx curl g++ gcc

mkdir -p /src /var/log/nginx /run/nginx /var/cache/nginx && \
addgroup nginx && \
adduser --shell /usr/sbin/nologin --ingroup nginx --disabled-password nginx

cd /src && \
git clone --depth 1 -b v3/master --single-branch https://github.com/SpiderLabs/ModSecurity && \
git clone --depth 1 https://github.com/SpiderLabs/ModSecurity-nginx.git && \
wget -qO - https://www.openssl.org/source/openssl-1.1.1q.tar.gz | tar xzf  - -C /src && \
wget -qO - http://nginx.org/download/nginx-1.22.0.tar.gz | tar xzf  - -C /src && \
wget -qO - https://github.com/coreruleset/coreruleset/archive/refs/tags/v3.3.2.tar.gz | tar xzf  - -C /src && \
wget -qO /src/modsecurity.conf https://raw.githubusercontent.com/SpiderLabs/ModSecurity/v3/master/modsecurity.conf-recommended

cd /src/openssl-1.1.1q && \
./config no-async -Wl,--enable-new-dtags,-rpath,'$(LIBRPATH)' && \
make -j$(nproc) depend && \
make -j$(nproc) && \
make -j$(nproc) install

cd /src/ModSecurity && \
git submodule init && \
git submodule update && \
./build.sh && \
./configure && \
make -j$(nproc) && \
make install

cd /src/nginx-1.22.0 && \
./configure \
--prefix=/etc/nginx \
--sbin-path=/usr/sbin/nginx \
--conf-path=/etc/nginx/nginx.conf \
--error-log-path=/var/log/nginx/error.log \
--http-log-path=/var/log/nginx/access.log \
--pid-path=/var/run/nginx.pid \
--lock-path=/var/run/nginx.lock \
--http-client-body-temp-path=/var/cache/nginx/client_temp \
--http-proxy-temp-path=/var/cache/nginx/proxy_temp \
--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \
--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \
--http-scgi-temp-path=/var/cache/nginx/scgi_temp \
--user=nginx \
--group=nginx \
--with-http_ssl_module \
--with-http_realip_module \
--with-http_addition_module \
--with-http_sub_module \
--with-http_dav_module \
--with-http_flv_module \
--with-http_mp4_module \
--with-http_gunzip_module \
--with-http_gzip_static_module \
--with-http_random_index_module \
--with-http_secure_link_module \
--with-http_stub_status_module \
--with-http_auth_request_module \
--without-http_autoindex_module \
--without-http_ssi_module \
--with-threads \
--with-stream \
--with-stream_ssl_module \
--with-mail \
--with-mail_ssl_module \
--with-file-aio \
--with-http_v2_module \
--with-openssl-opt="no-async enable-ec_nistp_64_gcc_128 no-shared no-ssl2 no-ssl3 no-comp no-idea no-weak-ssl-ciphers -DOPENSSL_NO_HEARTBEATS -O3 -fPIE -fstack-protector-strong -D_FORTIFY_SOURCE=2" \
--with-pcre-jit \
--with-openssl=/src/openssl-1.1.1q \
--add-dynamic-module=/src/ModSecurity-nginx && \
make -j$(nproc) && \
make -j$(nproc) install && \
make -j$(nproc) modules && \
cp objs/ngx_http_modsecurity_module.so /etc/nginx/modules

cd ~ && \
mkdir -p /etc/nginx/modsec/conf.d && \
mv /src/modsecurity.conf /etc/nginx/modsec && \
sed -i 's/SecRuleEngine DetectionOnly/SecRuleEngine On/g' /etc/nginx/modsec/modsecurity.conf && \
sed -i 's!SecAuditLog /var/log/modsec_audit.log!SecAuditLog /var/log/nginx/modsec_audit.log!g' /etc/nginx/modsec/modsecurity.conf && \
mv /src/coreruleset-3.3.2 /usr/local/ && \
mv /usr/local/coreruleset-3.3.2/rules/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf.example /usr/local/coreruleset-3.3.2/rules/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf && \
mv /usr/local/coreruleset-3.3.2/rules/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf.example /usr/local/coreruleset-3.3.2/rules/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf && \
cp /usr/local/coreruleset-3.3.2/crs-setup.conf.example /usr/local/coreruleset-3.3.2/crs-setup.conf && \
cp -r /usr/local/coreruleset-3.3.2/ /etc/nginx/modsec/ && \
touch /etc/nginx/modsec/main.conf && \
touch /etc/nginx/modsec/mds_exclusions.conf && \
curl https://raw.githubusercontent.com/SpiderLabs/ModSecurity/49495f1925a14f74f93cb0ef01172e5abc3e4c55/unicode.mapping -o /etc/nginx/modsec/unicode.mapping

cd /src/openssl-1.1.1q && \
make -j$(nproc) install && \
if [ -f /usr/bin/openssl ]; then rm -f /usr/bin/openssl; fi && \
if [ -f /usr/local/ssl/bin/openssl ]; then ln -s /usr/local/ssl/bin/openssl /usr/bin/; fi && \
if [ -f /usr/local/bin/openssl ]; then ln -s /usr/local/bin/openssl /usr/bin/; fi

apt install certbot python3-certbot-nginx

apt install default-jre && \
apt install default-jdk

wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add -

sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list' && \
apt update && \
apt install jenkins

apt install python3-pip
pip install gixy

chown -R nginx:nginx /run/nginx /var/log/nginx /var/cache/nginx /etc/nginx
usermod -a -G nginx jenkins
